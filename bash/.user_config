
# ----------------------
# User Config
# ----------------------

if [ $SHELL = '/bin/bash' ]; then
		# First need to install fzf in the root folder
		# git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
		# ~/.fzf/install
    [ -f ~/.fzf.bash ] && source ~/.fzf.bash
		export FZF_DEFAULT_OPS="--extended"
		
		bind '"\e[A": history-search-backward'
		bind '"\e[B": history-search-forward'
		
		# Direnv setup
		# create a file `.envrc` to any folder to activate the direnv
		# give permission `direnv allow .`
		eval "$(direnv hook bash)"

		cdnvm() {
		    cd "$@";
		    nvm_path=$(nvm_find_up .nvmrc | tr -d '\n')

		    # If there are no .nvmrc file, use the default nvm version
		    if [[ ! $nvm_path = *[^[:space:]]* ]]; then

		        declare default_version;
		        default_version=$(nvm version default);

		        # If there is no default version, set it to `node`
		        # This will use the latest version on your machine
		        if [[ $default_version == "N/A" ]]; then
		            nvm alias default node;
		            default_version=$(nvm version default);
		        fi

		        # If the current version is not the default version, set it to use the default version
		        if [[ $(nvm current) != "$default_version" ]]; then
		            nvm use default;
		        fi

		        elif [[ -s $nvm_path/.nvmrc && -r $nvm_path/.nvmrc ]]; then
		        declare nvm_version
		        nvm_version=$(<"$nvm_path"/.nvmrc)

		        declare locally_resolved_nvm_version
		        # `nvm ls` will check all locally-available versions
		        # If there are multiple matching versions, take the latest one
		        # Remove the `->` and `*` characters and spaces
		        # `locally_resolved_nvm_version` will be `N/A` if no local versions are found
		        locally_resolved_nvm_version=$(nvm ls --no-colors "$nvm_version" | tail -1 | tr -d '\->*' | tr -d '[:space:]')

		        # If it is not already installed, install it
		        # `nvm install` will implicitly use the newly-installed version
		        if [[ "$locally_resolved_nvm_version" == "N/A" ]]; then
		            nvm install "$nvm_version";
		        elif [[ $(nvm current) != "$locally_resolved_nvm_version" ]]; then
		            nvm use "$nvm_version";
		        fi
		    fi
		}
		alias cd='cdnvm'
		cd $PWD

fi

if [ $SHELL = '/bin/zsh' ]; then	
		[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
		export FZF_DEFAULT_OPS="--extended"
		
		# Direnv setup
		# create a file `.envrc` to any folder to activate the direnv
		# give permission `direnv allow .`
		eval "$(direnv hook zsh)"

		# place this after nvm initialization!
		autoload -U add-zsh-hook
		load-nvmrc() {
		  local node_version="$(nvm version)"
		  local nvmrc_path="$(nvm_find_nvmrc)"

		  if [ -n "$nvmrc_path" ]; then
		    local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

		    if [ "$nvmrc_node_version" = "N/A" ]; then
		      nvm install
		    elif [ "$nvmrc_node_version" != "$node_version" ]; then
		      nvm use
		    fi
		  elif [ "$node_version" != "$(nvm version default)" ]; then
		    echo "Reverting to nvm default version"
		    nvm use default
		  fi
		}
		add-zsh-hook chpwd load-nvmrc
		load-nvmrc
fi

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

export HISTSIZE=5000
export HISTFILESIZE=10000
export HISTIGNORE='*sudo -S*'

export PATH=$PATH:$HOME/bin

# Node change the path for global package
export PATH=~/.npm-global/bin:$PATH
export PATH=$HOME/.config/composer/vendor/bin:$PATH

# Java Home
# export JAVA_HOME="/usr/lib/jvm/jdk1.8.0_221"
# export PATH=$JAVA_HOME/bin:$PATH

# Android home default path
# export ANDROID_HOME=$HOME/Android/Sdk
# export PATH=$PATH:$ANDROID_HOME/emulator
# export PATH=$PATH:$ANDROID_HOME/tools/emulator
# export PATH=$PATH:$ANDROID_HOME/tools
# export PATH=$PATH:$ANDROID_HOME/tools/bin
# export PATH=$PATH:$ANDROID_HOME/platform-tools

# Update code
function update(){
  sudo apt update
}

# Upgrade code
function upgrade(){
  sudo apt upgrade -y;
	# sudo snap refresh;
}

# Autoremvoe code
function autoremove(){
  sudo apt autoremove -y &&
  sudo apt autoclean &&
  sudo apt clean
}

# cd and ls in single command
function cd(){
  builtin cd "$@" &&  ls -A
}

function mkcd(){
	mkdir $1 && cd $1
}